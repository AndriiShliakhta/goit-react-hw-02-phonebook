{"version":3,"sources":["ContactForm/ContactForm.js","ContactList/ContactListItem/ContactListItem.js","ContactList/ContactList.js","Filter/Filter.js","App.js","index.js"],"names":["INITIAL_STATE","name","number","ContactForm","state","handleChange","target","value","setState","handleSubmit","evt","preventDefault","props","addContact","reset","this","action","onSubmit","type","pattern","title","required","onChange","Component","ContactListItem","ContactList","filteredNames","contacts","filter","toLowerCase","includes","searchName","map","id","Filter","find","App","contact","prev","uuidv4","findContact","e","length","ReactDOM","render","document","getElementById"],"mappings":"6PAIMA,EAAgB,CACpBC,KAAM,GACNC,OAAQ,IAEJC,E,4MACJC,M,eAAaJ,G,EAEbK,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRL,EAAgBK,EAAhBL,KAAMM,EAAUD,EAAVC,MACd,EAAKC,SAAL,eAAiBP,EAAOM,K,EAG1BE,aAAe,SAAAC,GACbA,EAAIC,iBACJ,EAAKC,MAAMC,WAAW,EAAKT,OAC3B,EAAKU,S,EAEPA,MAAQ,WACN,EAAKN,SAAL,eAAmBR,K,4CAGrB,WACE,MAAyBe,KAAKX,MAAtBH,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAEd,OACE,uBAAMc,OAAO,GAAGC,SAAUF,KAAKN,aAA/B,UACE,yCAEE,uBACES,KAAK,OACLjB,KAAK,OACLkB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRd,MAAON,EACPqB,SAAUP,KAAKV,kBAGnB,uBACA,2CAEE,uBACEa,KAAK,MACLjB,KAAK,SACLkB,QAAQ,yFACRZ,MAAOL,EACPkB,MAAM,giBACNC,UAAQ,EACRC,SAAUP,KAAKV,kBAGnB,uBAEA,wBAAQa,KAAK,SAAb,gC,GAjDkBK,aAsDXpB,I,QClDAqB,EAVS,SAAC,GAAsB,IAApBvB,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC/B,OACE,6BACE,8BACGD,EADH,KACWC,QCHXuB,E,4MACJC,cAAgB,WACd,OAAO,EAAKd,MAAMe,SAASC,QAAO,YAChC,OAD8C,EAAX3B,KACvB4B,cAAcC,SAAS,EAAKlB,MAAMmB,WAAWF,mB,4CAI7D,WACE,OACE,6BACGd,KAAKW,gBAAgBM,KAAI,gBAAGC,EAAH,EAAGA,GAAIhC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACxB,cAAC,EAAD,CAA0BD,KAAMA,EAAMC,OAAQA,GAAxB+B,Y,GAXNV,aAkBXE,ICAAS,EAjBA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChB,OACE,mCACE,0DAEE,uBACEjB,KAAK,OACLjB,KAAK,SACLkB,QAAQ,yHACRC,MAAM,kcAENE,SAAUa,UCTdC,E,4MACJhC,MAAQ,CACNuB,SAAU,GACVC,OAAQ,I,EAGVf,WAAa,SAAAwB,GACX,EAAK7B,UAAS,SAAA8B,GAAI,MAAK,CACrBX,SAAS,GAAD,mBAAMW,EAAKX,UAAX,4BAA0BU,GAA1B,IAAmCJ,GAAIM,uB,EAGnDC,YAAc,SAAAC,GACZ,EAAKjC,SAAS,CAAEoB,OAAQa,EAAEnC,OAAOC,S,4CAGnC,WACE,OACE,qCACE,2CACA,cAAC,EAAD,CACEoB,SAAUZ,KAAKX,MAAMuB,SACrBd,WAAYE,KAAKF,aAEnB,0CACA,cAAC,EAAD,CAAQsB,KAAMpB,KAAKyB,cAElBzB,KAAKX,MAAMuB,SAASe,OAAS,GAC5B,cAAC,EAAD,CACEf,SAAUZ,KAAKX,MAAMuB,SACrBI,WAAYhB,KAAKX,MAAMwB,gB,GA7BjBL,aAqCHa,I,YCtCfO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e39b1b1f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import styles from './ContactForm.module.css';\r\n// import PropTypes from 'prop-types';\r\n\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  number: '',\r\n};\r\nclass ContactForm extends Component {\r\n  state = { ...INITIAL_STATE };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = evt => {\r\n    evt.preventDefault();\r\n    this.props.addContact(this.state);\r\n    this.reset();\r\n  };\r\n  reset = () => {\r\n    this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form action=\"\" onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            value={number}\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default ContactForm;\r\n// ContactForm.propTypes = {\r\n//   goodfeedback: PropTypes.number,\r\n//   neutralfeedback: PropTypes.number,\r\n//   badfeedback: PropTypes.number,\r\n// };\r\n","import React from 'react';\r\n\r\nconst ContactListItem = ({ name, number }) => {\r\n  return (\r\n    <li>\r\n      <p>\r\n        {name}: {number}\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React, { Component } from 'react';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\n\r\nclass ContactList extends Component {\r\n  filteredNames = () => {\r\n    return this.props.contacts.filter(({ name }) => {\r\n      return name.toLowerCase().includes(this.props.searchName.toLowerCase());\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.filteredNames().map(({ id, name, number }) => (\r\n          <ContactListItem key={id} name={name} number={number} />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\n// import styles from './Profile.module.css';\r\n// import PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ find }) => {\r\n  return (\r\n    <>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          //   value={filter}\r\n          onChange={find}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\nexport default Filter;\r\n// Phonebook.propTypes = {\r\n//   goodfeedback: PropTypes.number,\r\n//   neutralfeedback: PropTypes.number,\r\n//   badfeedback: PropTypes.number,\r\n// };\r\n","import React, { Component } from 'react';\r\nimport ContactForm from './ContactForm/ContactForm';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ContactList from './ContactList/ContactList';\r\nimport Filter from './Filter/Filter';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n  };\r\n\r\n  addContact = contact => {\r\n    this.setState(prev => ({\r\n      contacts: [...prev.contacts, { ...contact, id: uuidv4() }],\r\n    }));\r\n  };\r\n  findContact = e => {\r\n    this.setState({ filter: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm\r\n          contacts={this.state.contacts}\r\n          addContact={this.addContact}\r\n        />\r\n        <h2>Contacts</h2>\r\n        <Filter find={this.findContact} />\r\n\r\n        {this.state.contacts.length > 0 && (\r\n          <ContactList\r\n            contacts={this.state.contacts}\r\n            searchName={this.state.filter}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}