{"version":3,"sources":["Feedback/FeedbackOptions/FeedbackOptions.js","Feedback/Statistics/Statistics.js","Feedback/Notification/Notification.js","Feedback/Feedback.js","App.js","index.js"],"names":["FeedbackOptions","type","name","onClick","this","props","onLeaveFeedback","Component","Statistics","good","neutral","bad","total","positivePercentage","Notification","Feedback","state","goodfeedback","neutralfeedback","badfeedback","evt","step","setState","target","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","message","App","ReactDOM","render","document","getElementById"],"mappings":"8OACMA,E,4JACJ,WACE,OACE,qCACE,uDACA,wBACEC,KAAK,SACLC,KAAK,eACLC,QAASC,KAAKC,MAAMC,gBAHtB,kBAOA,wBACEL,KAAK,SACLC,KAAK,kBACLC,QAASC,KAAKC,MAAMC,gBAHtB,qBAOA,wBACEL,KAAK,SACLC,KAAK,cACLC,QAASC,KAAKC,MAAMC,gBAHtB,wB,GAnBsBC,aA8BfP,IC9BTQ,E,4JACJ,WACE,OACE,qCACE,4CACA,wCAEE,qCAAQJ,KAAKC,MAAMI,WAErB,2CAEE,qCAAQL,KAAKC,MAAMK,cAErB,uCAEE,qCAAQN,KAAKC,MAAMM,UAErB,yCAEE,qCAAQP,KAAKC,MAAMO,cAErB,qDAEE,iCACIR,KAAKC,MAAMQ,qBAETT,KAAKC,MAAMQ,qBADX,IAFN,iB,GAvBeN,aAkCVC,IChCAM,EADM,kBAAM,qDCKrBC,E,4MACJC,MAAQ,CACNC,aAAc,EACdC,gBAAiB,EACjBC,YAAa,G,EAGfb,gBAAkB,SAAAc,GAChB,IAAQC,EAAS,EAAKhB,MAAdgB,KACR,EAAKC,UAAS,SAAAN,GAAK,sBAChBI,EAAIG,OAAOrB,KAAOc,EAAMI,EAAIG,OAAOrB,MAAQmB,O,EAIhDG,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKV,OAAOW,QAAO,SAACC,EAAKC,GAE5C,OADAD,GAAOC,M,EAKXC,gCAAkC,WAChC,OAAOC,KAAKC,MACV,KAAO,EAAKR,qBAAuB,EAAKR,MAAMC,gB,4CAIlD,WACE,MAAuDb,KAAKY,MAApDC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAAiBC,EAAvC,EAAuCA,YACvC,OACE,qCACE,cAAC,EAAD,CAEEb,gBAAiBF,KAAKE,kBAEvBW,GAAgBC,GAAmBC,EAClC,cAAC,EAAD,CACEV,KAAMQ,EACNP,QAASQ,EACTP,IAAKQ,EACLP,MAAOR,KAAKoB,mBACZX,mBAAoBT,KAAK0B,kCAG3B,cAAC,EAAD,CAAcG,QAAQ,6B,GA5CT1B,aAkDRQ,ICtDA,SAASmB,EAAI7B,GAC1B,OACE,mCACE,cAAC,EAAD,CAAUgB,KAAM,M,YCDtBc,IAASC,OAAO,cAACF,EAAD,IAASG,SAASC,eAAe,W","file":"static/js/main.e5ac2708.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass FeedbackOptions extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h3>Please leave feedback</h3>\r\n        <button\r\n          type=\"button\"\r\n          name=\"goodfeedback\"\r\n          onClick={this.props.onLeaveFeedback}\r\n        >\r\n          Good\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          name=\"neutralfeedback\"\r\n          onClick={this.props.onLeaveFeedback}\r\n        >\r\n          Neutral\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          name=\"badfeedback\"\r\n          onClick={this.props.onLeaveFeedback}\r\n        >\r\n          Bad\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default FeedbackOptions;\r\n","import React, { Component } from 'react';\r\nclass Statistics extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h3>Statistics</h3>\r\n        <div>\r\n          Good:\r\n          <span> {this.props.good}</span>\r\n        </div>\r\n        <div>\r\n          Neutral:\r\n          <span> {this.props.neutral}</span>\r\n        </div>\r\n        <div>\r\n          Bad:\r\n          <span> {this.props.bad}</span>\r\n        </div>\r\n        <div>\r\n          Total:\r\n          <span> {this.props.total()}</span>\r\n        </div>\r\n        <div>\r\n          Positive feedback:\r\n          <span>\r\n            {!this.props.positivePercentage()\r\n              ? '0'\r\n              : this.props.positivePercentage()}\r\n            %\r\n          </span>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Statistics;\r\n","import React from 'react';\r\n\r\nconst Notification = () => <div>No feedback given</div>;\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\r\n// import styles from './Profile.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport Statistics from './Statistics/Statistics';\r\nimport Notification from './Notification/Notification';\r\n\r\nclass Feedback extends Component {\r\n  state = {\r\n    goodfeedback: 0,\r\n    neutralfeedback: 0,\r\n    badfeedback: 0,\r\n  };\r\n\r\n  onLeaveFeedback = evt => {\r\n    const { step } = this.props;\r\n    this.setState(state => ({\r\n      [evt.target.name]: state[evt.target.name] + step,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce((acc, value) => {\r\n      acc += value;\r\n      return acc;\r\n    });\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.round(\r\n      100 / (this.countTotalFeedback() / this.state.goodfeedback),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { goodfeedback, neutralfeedback, badfeedback } = this.state;\r\n    return (\r\n      <>\r\n        <FeedbackOptions\r\n          // options={ }\r\n          onLeaveFeedback={this.onLeaveFeedback}\r\n        />\r\n        {goodfeedback || neutralfeedback || badfeedback ? (\r\n          <Statistics\r\n            good={goodfeedback}\r\n            neutral={neutralfeedback}\r\n            bad={badfeedback}\r\n            total={this.countTotalFeedback}\r\n            positivePercentage={this.countPositiveFeedbackPercentage}\r\n          />\r\n        ) : (\r\n          <Notification message=\"No feedback given\"></Notification>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Feedback;\r\nFeedback.propTypes = {\r\n  goodfeedback: PropTypes.number,\r\n  neutralfeedback: PropTypes.number,\r\n  badfeedback: PropTypes.number,\r\n};\r\n","import React from 'react';\r\nimport Feedback from './Feedback/Feedback';\r\n\r\nexport default function App(props) {\r\n  return (\r\n    <>\r\n      <Feedback step={1} />\r\n    </>\r\n  );\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}